name: Create TCP Outlet On SSH Server
inputs:
  ssh_host:
    description: "SSH Host"
    required: true
  ssh_user:
    description: "SSH User"
    required: true
  ssh_key_file_path:
    description: "SSH Key File Path"
    required: true
  email_addresses:
    description: "Email Addresses To Create TCP Inlet"
    required: true
  script_path:
    description: "Enrollment Script Path"
    required: false
    default: "./scripts"
  docker_image:
    description: "Docker Image With Tools For Enroll"
    default: "ghcr.io/build-trust/artifacts-helper:latest"


outputs:
  benchmark_results: 
    description: Benchmark Results
    value: ${{ steps.benchmark.outputs.BENCHMARK_OUTPUT }}

runs:
  using: "composite"
  steps:
    - shell: bash
      id: benchmark
      run: |
          set -e

          chmod 600 ${{ inputs.ssh_key_file_path }}
          mkdir -p ~/.ssh
          
          known_host_path=$(echo ~/.ssh/known_hosts)
          touch "$known_host_path"

          ssh-keyscan ${{ inputs.ssh_host }} >> "$known_host_path" || true

          # Start Ockam portal for different plans
          emails="${{ inputs.email_addresses }}"
          emails=(${emails})

          benchmark_output=$(cat <<EOF
          \`Ockam Project Plans Benchmark Result\`
          ----------------------------------------
          EOF
          )

          for email in "${emails[@]}"; do
            PLAN="$(echo "$email" | sed 's/benchmark_\(.*\)@ockam.io/\1/i')"

            # Enroll
            ockam reset -y
            curl --proto '=https' --tlsv1.2 -sSfL https://raw.githubusercontent.com/build-trust/.github/refs/heads/custom-actions/actions/run_bats_test/enroll.sh | DOCKER_IMAGE_FOR_ENROLL="${{ inputs.docker_image }}" EMAIL_ADDRESS="$email" SCRIPT_PATH="${{ inputs.script_path }}"  bash

            ockam project ticket --usage-count 1 --attribute client > ticket
            until scp -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ticket "${{ inputs.ssh_user }}@${{ inputs.ssh_host }}:ticket"; do sleep 10; done

            ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }}\
              'bash -s' << EOS
                export OCKAM_OPENTELEMETRY_EXPORT=false
                export OCKAM_LOG_LEVEL=error
                OCKAM_HOME="${PLAN}_enroll" ockam reset -y
                OCKAM_HOME="${PLAN}_enroll" ockam node create --quiet --enrollment-ticket ticket '{"tcp-inlet": {"from": "127.0.0.1:6666", "allow": "server", "via": "server-relay"}}'
                sleep 5
          EOS

            ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "nix shell nixpkgs#iperf3 --command iperf3 --client 127.0.0.1 --port 6666"
            result=$(ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "nix shell nixpkgs#iperf3 --command iperf3 --client 127.0.0.1 --port 6666 --json")
            ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "OCKAM_HOME=${PLAN}_enroll ockam reset -y"
            echo $result

            sender_mean_rtt=$(echo $result | jq -r '.end.streams[0].sender.mean_rtt')
            senders_bit_rate=$(echo $result | jq -r '.end.sum_sent.bits_per_second')
            senders_transfer=$(echo $result | jq -r '.end.sum_sent.bytes')
            senders_retransmits=$(echo $result | jq -r '.end.sum_sent.retransmits')

            receivers_bit_rate=$(echo $result | jq -r '.end.sum_received.bits_per_second')
            receiver_transfer=$(echo $result | jq -r '.end.sum_received.bytes')

            id="$(echo "$email" | sed 's/benchmark_\(.*\)@ockam.io/\1/i')"

            benchmark_output=$(cat <<EOF
          ${benchmark_output}

          • Plan: $id 
            • Sender Mean RTT: $(printf "%.2f" "$(echo "$sender_mean_rtt / 1000" | nix shell nixpkgs#bc --command bc -l)") ms
            • Senders BitRate: $(printf "%.2f" "$(echo "$senders_bit_rate / 1024 / 1024" | nix shell nixpkgs#bc --command bc -l)") Mbits/sec
            • Senders Transfer: $(printf "%.2f" "$(echo "$senders_transfer / 1024 / 1024" | nix shell nixpkgs#bc --command bc -l)") MB
            • Senders Retransmits: $senders_retransmits
            • Receivers BitRate: $(printf "%.2f" "$(echo "$receivers_bit_rate / 1024 / 1024" | nix shell nixpkgs#bc --command bc -l)") Mbits/sec
            • Receiver Transfer: $(printf "%.2f" "$(echo "$receiver_transfer / 1024 / 1024" | nix shell nixpkgs#bc --command bc -l)") MB
          EOF
          )
          done

          echo "Successfully tested all plans"
          echo $benchmark_output

          echo 'BENCHMARK_OUTPUT<<EOF' >> $GITHUB_OUTPUT
          echo "$benchmark_output" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT