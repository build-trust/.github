name: Create TCP Outlet On SSH Server
inputs:
  ssh_host:
    description: "SSH Host"
    required: true
  ssh_user:
    description: "SSH User"
    required: true
  ssh_key_file_path:
    description: "SSH Key File Path"
    required: true
  email_addresses:
    description: "Email Addresses To Create TCP Inlet"
    required: true
  script_path:
    description: "Enrollment Script Path"
    required: false
    default: "./scripts"
  docker_image:
    description: "Docker Image With Tools For Enroll"
    default: "ghcr.io/build-trust/artifacts-helper:latest"
  slack_channel:
    description: "Slack Channel"
    required: true
  slack_oauth:
    description: "Slack OAuth"
    required: true
  slack_thread_id:
    description: "Slack Thread ID"
    required: true
  csv_file_path:
    description: "CSV File Path"
    required: false

outputs:
  csv_benchmark_results: 
    description: Benchmark Results In CSV Format
    value: ${{ steps.benchmark.outputs.CSV_BENCHMARK_OUTPUT }}

runs:
  using: "composite"
  steps:
    - shell: bash
      id: benchmark
      run: |
          set -ex

          chmod 600 ${{ inputs.ssh_key_file_path }}
          mkdir -p ~/.ssh
          
          known_host_path=$(echo ~/.ssh/known_hosts)
          touch "$known_host_path"

          ssh-keyscan ${{ inputs.ssh_host }} >> "$known_host_path" || true

          # Start Ockam portal for different plans
          emails="${{ inputs.email_addresses }}"
          emails=(${emails})

          ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} \
            'bash -s' << EOS
              set -ex
              export OCKAM_OPENTELEMETRY_EXPORT=false
              export OCKAM_LOG_LEVEL=error

              OCKAM_HOME="LOCAL" ockam node create "
                name: client
                tcp-inlets:
                  echo_inlet:
                    from: 127.0.0.1:40001
                    to: /node/server/secure/api/service/echo_outlet
                  null_outlet:
                    from: 127.0.0.1:50001
                    to: /node/server/secure/api/service/null_outlet
              "
              sleep 5
          EOS

          function send_notification() {
            json_string=$( jq --null-input \
              --arg text "$1" \
              --arg channel "${{ inputs.slack_channel }}" \
              --arg thread_ts "${{ inputs.slack_thread_id }}" \
              '{"text": $text, "channel": $channel, "thread_ts": $thread_ts, "reply_broadcast": "true"}')


            slack_response=$(curl -s -X POST 'https://slack.com/api/chat.postMessage' \
              -H "Authorization: Bearer ${{ inputs.slack_oauth }}" \
              -H "Content-Type: application/json" \
              -d "$json_string")
          }

          current_date=$(date +%Y-%m-%d)
          csv_report=",,,"

          throughput_result=$(ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "tcp-test throughput --seconds 10  127.0.0.1:50001")
          latency_result=$(ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "tcp-test latency 127.0.0.1:40001")
          ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "OCKAM_HOME=LOCAL ockam reset -y"
          echo "$latency_result"
          echo "$throughput_result"

          latency_avg=$(echo "$latency_result" | grep "Average")
          throughput_avg=$(echo "$throughput_result" | grep "Average")

          csv_report=$(cat <<EOF
          $csv_report
          $current_date,Without Orchestrator Project,\"$latency_avg\",\"$throughput_avg\"
          EOF
          )

          benchmark_output=$(cat <<EOF
          \`• Without Orchestrator Project\`
          \`\`\`
          • Latency
          $latency_result

          • Throughput
          $throughput_result
          \`\`\`
          EOF
          )

          send_notification "$benchmark_output"

          for email in "${emails[@]}"; do
            PLAN="$(echo "$email" | sed 's/benchmark_\(.*\)@ockam.io/\1/i')"

            # Enroll
            ockam reset -y
            curl --proto '=https' --tlsv1.2 -sSfL https://raw.githubusercontent.com/build-trust/.github/refs/heads/custom-actions/actions/run_bats_test/enroll.sh | DOCKER_IMAGE_FOR_ENROLL="${{ inputs.docker_image }}" EMAIL_ADDRESS="$email" SCRIPT_PATH="${{ inputs.script_path }}"  bash

            ockam project ticket --usage-count 2 --attribute client > ticket
            until scp -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ticket "${{ inputs.ssh_user }}@${{ inputs.ssh_host }}:ticket"; do sleep 10; done

            ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} \
              'bash -s' << EOS
                set -ex
                export OCKAM_OPENTELEMETRY_EXPORT=false
                export OCKAM_LOG_LEVEL=error
                OCKAM_HOME="${PLAN}_enroll" ockam reset -y
                OCKAM_HOME="${PLAN}_enroll" ockam node create --enrollment-ticket ticket "
                  name: client
                  tcp-inlets:
                    echo_inlet:
                      from: 127.0.0.1:40001
                      allow: server
                      to: /project/default/service/forward_to_server-relay/secure/api/service/echo_outlet
                    null_outlet:
                      from: 127.0.0.1:50001
                      allow: server
                      to: /project/default/service/forward_to_server-relay/secure/api/service/null_outlet
                "

                # OCKAM_HOME="${PLAN}_enroll" ockam node create --quiet --enrollment-ticket ticket '{"tcp-inlet": {"from": "127.0.0.1:40001", "allow": "server", "to": "/project/default/service/forward_to_server-relay/secure/api/service/echo_outlet"}}'
                # OCKAM_HOME="${PLAN}_enroll" ockam node create --quiet --enrollment-ticket ticket '{"tcp-inlet": {"from": "127.0.0.1:50001", "allow": "server", "to": "/project/default/service/forward_to_server-relay/secure/api/service/null_outlet"}}'
                sleep 5
          EOS

            throughput_result=$(ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "tcp-test throughput --seconds 10  127.0.0.1:50001")
            latency_result=$(ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "tcp-test latency 127.0.0.1:40001")
            ssh -o UserKnownHostsFile="$known_host_path" -i ${{ inputs.ssh_key_file_path }} ${{ inputs.ssh_user }}@${{ inputs.ssh_host }} "OCKAM_HOME=${PLAN}_enroll ockam reset -y"
            echo "$latency_result"
            echo "$throughput_result"

            id="$(echo "$email" | sed 's/benchmark_\(.*\)@ockam.io/\1/i')"

            latency_avg=$(echo "$latency_result" | grep "Average")
            throughput_avg=$(echo "$throughput_result" | grep "Average")

            csv_report=$(cat <<EOF
          $csv_report
          $current_date,\"$id\",\"$latency_avg\",\"$throughput_avg\"
          EOF
          )

            benchmark_output=$(cat <<EOF
          • Plan: \`$id\`
          \`\`\`
          • Latency
          $latency_result

          • Throughput
          $throughput_result
          \`\`\`
          EOF
          )

          send_notification "$benchmark_output"
          done

          echo "Successfully tested all plans"
          echo $benchmark_output

          echo 'CSV_BENCHMARK_OUTPUT<<EOF' >> $GITHUB_OUTPUT
          echo "$csv_report" >> $GITHUB_OUTPUT
          echo 'EOF' >> $GITHUB_OUTPUT
