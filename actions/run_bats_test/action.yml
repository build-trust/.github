name: Run Bats Test
description: Run Bats Test On CI

inputs:
  perform_ockam_enroll:
    description: "Perform Ockam Enroll"
    required: true
  script_path:
    description: "Enrollment Script Path"
    required: true
  ockam_repository_ref:
    description: "Ref From Which To Run Bats Test"
    required: false
  ockam_cli_repository_ref:
    description: "Ref From Which To Build Ockam Command"
    required: false
  controller_id:
    description: "Controller ID Of Ockam Command"
    required: false
  controller_addr:
    description: "Controller Address Of Ockam Command"
    required: false
  email_address:
    description: "Emaill Address To Run Ockam Enroll"
    required: false
    default: "test@ockam.io"
  build_ockam_binary:
    description: "Build Ockam Binary"
    required: true
    default: 'true'

runs:
  using: "composite"

  steps:
    - name: Check If Nix Is Installed
      id: nix-status
      shell: bash
      run: |
        if ! which nix; then
          echo "NIX_STATUS=1"  >> $GITHUB_ENV
        fi

    - name: Install Nix If There Is No Cache
      if: ${{ env.NIX_STATUS == 1 }}
      shell: bash
      run: |
        curl -L https://nixos.org/nix/install | sh -s -- --daemon
        echo "extra-experimental-features = flakes" >> /etc/nix/nix.conf
        echo "extra-experimental-features = nix-command" >> /etc/nix/nix.conf

        echo "/nix/var/nix/profiles/per-user/root/profile/bin" >> $GITHUB_PATH
        echo "/nix/var/nix/profiles/default/bin" >> $GITHUB_PATH

    - shell: bash
      run: |
        echo "OCKAM_DISABLE_UPGRADE_CHECK=1"  >> $GITHUB_ENV
        echo "====> ${{ inputs.ockam_repository_ref }} Ockam ref here"
        if [[ -n "${{ inputs.controller_id }}" ]]; then
          echo "OCKAM_CONTROLLER_IDENTITY_ID=${{ inputs.controller_id }}" >> $GITHUB_ENV
          echo "OCKAM_CONTROLLER_ADDR=${{ inputs.controller_addr }}" >> $GITHUB_ENV
        fi

    - if: ${{ inputs.perform_ockam_enroll == 'false' }}
      shell: bash
      run: |
        set -ex
        mkdir /github/home/.local
        cp -r /configs/.ockam /github/home

        ls /github/home

    - uses: actions/checkout@bf085276cecdb0cc76fbbe0687a5a0e786646936
      with:
        ref: ${{ inputs.ockam_cli_repository_ref != '' && inputs.ockam_cli_repository_ref || inputs.ockam_repository_ref }}
        repository: build-trust/ockam
        path: ockam_cli

    - uses: actions/checkout@bf085276cecdb0cc76fbbe0687a5a0e786646936
      with:
        ref: ${{ inputs.ockam_repository_ref }}
        repository: build-trust/ockam
        path: ockam_bats

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      uses: dtolnay/rust-toolchain@stable

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      uses: Swatinem/rust-cache@640a22190e7a783d4c409684cea558f081f92012
      with:
        workspaces: "ockam_cli -> target"
        cache-on-failure: "true"

    - name: Nix Collect Garbage
      shell: bash
      run: nix-collect-garbage

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      shell: nix develop ./tools/nix#rust --command bash {0}
      working-directory: ockam_cli
      run: |
        set -ex
        echo $OCKAM_DISABLE_UPGRADE_CHECK

        cargo build --locked --bin ockam
        mv ./target/debug/ockam /usr/bin

    - shell: bash
      if: ${{ inputs.perform_ockam_enroll == 'true' }}
      run: |
        set -ex
        ockam --version
        SCRIPT_DIR="${{ inputs.script_path }}" EMAIL_ADDRESS="${{ inputs.email_address }}" bash ${{ inputs.script_path }}/ockam_enroll.sh
        ls /github/home

    - shell: nix develop ./tools/nix#rust --command bash {0}
      working-directory: ockam_bats
      run: |
        set -ex;
        ockam project list --output json
        ls -a /github/home
        nix develop --impure --expr 'let pkgs = import (builtins.getFlake "nixpkgs/nixos-23.11") {}; in pkgs.mkShell { buildInputs = with pkgs; [ postgresql python311Packages.psycopg2 python311Packages.selenium python311Packages.flask telegraf ]; }' --command sh -c 'BATS_TEST_RETRIES=2 ORCHESTRATOR_TESTS=1 LONG_TESTS=1 bats ./implementations/rust/ockam/ockam_command/tests/bats'

        echo "Bats passed...."

    - if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ockam-logs-${{ inputs.controller_addr == '' && 'prod' || 'dev' }}-${{ inputs.perform_ockam_enroll == 'true' && 'new_enroll' || 'cached_enroll' }}
        path: /github/home/.bats-tests/*

    - if: ${{ always() }}
      shell: bash
      run: |
        set -ex

        ls /github/home/
        ls /github/home/.bats-tests/

        echo "Clearing resources......"
        ockam space list --output json

        projects=$(ockam project list --output json)
        projects_length=$(jq '.|length' <<< $projects)

        default_project_space_name=""

        for (( c=0; c<$projects_length; c++ )); do
          project_space_name=$(jq -r ".[$c].space_name" <<< $projects)
          project_name=$(jq -r ".[$c].name" <<< $projects)

          if [[ "$project_name" != "default" || ${{ inputs.perform_ockam_enroll }} == 'true' ]]; then
            ockam project delete $project_space_name $project_name --yes || ockam project delete $project_space_name $project_name
            continue
          fi

          # Save default project space name
          default_project_space_name=$project_space_name
        done

        space_names=$(ockam space list --output json)
        space_name_length=$(jq '.|length' <<< $space_names)

        for (( c=0; c<$space_name_length; c++ )); do
          space_name=$(jq -r ".[$c].name" <<< $space_names)
          if [[ $space_name == $default_project_space_name ]]; then
            continue
          fi

          ockam space delete $space_name --yes || ockam space delete $space_name
        done
