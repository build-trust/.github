name: Create Bats Test Env
description: Create Bats Test Env

inputs:
  perform_ockam_enroll:
    description: "Perform Ockam Enroll"
    required: true
  ockam_repository_ref:
    description: "Ref From Which To Run Bats Test"
    required: false
  ockam_cli_repository_ref:
    description: "Ref From Which To Build Ockam Command"
    required: false
  controller_id:
    description: "Controller ID Of Ockam Command"
    required: false
  controller_addr:
    description: "Controller Address Of Ockam Command"
    required: false
  build_ockam_binary:
    description: "Build Ockam Binary"
    required: true
    default: "true"
  script_path:
    description: "Enrollment Script Path"
    required: true
  email_address:
    description: "Emaill Address To Run Ockam Enroll"
    required: false
    default: "test@ockam.io"

runs:
  using: "composite"

  steps:
    - name: Check If Nix Is Installed
      id: nix-status
      shell: bash
      run: |
        set -ex
        echo $HOSTNAME
        cat /proc/1/cgroup | tail -n 1
        cat /proc/1/sched | head -1

        if ! which nix; then
          echo "NIX_STATUS=1"  >> $GITHUB_ENV
        fi

    - name: Install Nix If There Is No Cache
      if: ${{ env.NIX_STATUS == 1 }}
      shell: bash
      run: |
        curl -L https://nixos.org/nix/install | sh -s -- --daemon
        sudo echo "extra-experimental-features = flakes" >> /etc/nix/nix.conf || echo "extra-experimental-features = flakes"
        sudo echo "extra-experimental-features = nix-command" >> /etc/nix/nix.conf || echo "extra-experimental-features = nix-command" >> /etc/nix/nix.conf

        echo "/nix/var/nix/profiles/per-user/root/profile/bin" >> $GITHUB_PATH
        echo "/nix/var/nix/profiles/default/bin" >> $GITHUB_PATH

    - shell: bash
      run: |
        echo "OCKAM_DISABLE_UPGRADE_CHECK=1"  >> $GITHUB_ENV
        echo "====> ${{ inputs.ockam_repository_ref }} Ockam ref here"
        if [[ -n "${{ inputs.controller_id }}" ]]; then
          echo "OCKAM_CONTROLLER_IDENTITY_ID=${{ inputs.controller_id }}" >> $GITHUB_ENV
          echo "OCKAM_CONTROLLER_ADDR=${{ inputs.controller_addr }}" >> $GITHUB_ENV
        fi

    - if: ${{ inputs.perform_ockam_enroll == 'false' }}
      shell: bash
      run: |
        set -ex
        mkdir /github/home/.local
        cp -r /configs/.ockam /github/home

        ls /github/home

    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        ref: ${{ inputs.ockam_cli_repository_ref != '' && inputs.ockam_cli_repository_ref || inputs.ockam_repository_ref }}
        repository: build-trust/ockam
        path: ockam_cli

    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      with:
        ref: ${{ inputs.ockam_repository_ref }}
        repository: build-trust/ockam
        path: ockam_bats

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      uses: dtolnay/rust-toolchain@stable

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      uses: Swatinem/rust-cache@640a22190e7a783d4c409684cea558f081f92012
      with:
        workspaces: "ockam_cli -> target"
        cache-on-failure: "true"

    - name: Nix Collect Garbage
      shell: bash
      run: nix-collect-garbage

    - if: ${{ inputs.build_ockam_binary == 'true' }}
      shell: bash
      working-directory: ockam_cli
      run: |
        set -ex
        echo $OCKAM_DISABLE_UPGRADE_CHECK

        if which docker; then
          cargo install --version 0.2.5 cross
          cross build --locked --bin ockam --target x86_64-unknown-linux-musl
          echo "PATH=$PATH:$(pwd)/target/x86_64-unknown-linux-musl/debug" >> $GITHUB_ENV
        else

          nix --quiet develop ./tools/nix#rust --command cargo build --locked --bin ockam
          mv ./target/debug/ockam /usr/bin
        fi

    # - if: ${{ inputs.build_ockam_binary == 'true' }}
    #   shell: bash
    #   working-directory: ockam_cli
    #   run: |
    #     echo "PATH=$PATH:$(pwd)/target/x86_64-unknown-linux-musl/debug" >> $GITHUB_ENV
    #     echo "NIXPKGS_ALLOW_UNFREE=1" >> $GITHUB_ENV

    - shell: bash
      run: |
        ockam_enroll_log=$(mktemp)
        echo "OCKAM_ENROLL_LOG=$ockam_enroll_log" >> $GITHUB_ENV

    - shell: bash
      if: ${{ inputs.perform_ockam_enroll == 'true' }}
      run: |
        # Get enrollment code
        set -ex
        sudo apt install expect || apt install expect
        # export QUIET=1
        export OCKAM_LOGGING=0
        export OCKAM_OPENTELEMETRY_EXPORT=0
        export OCKAM_DEFAULT_TIMEOUT=10m

        ockam_enroll_log=${{ env.OCKAM_ENROLL_LOG }}

        ockam identity create default
        unbuffer bash -c "echo | ockam enroll --identity default" | tee $ockam_enroll_log  &
        process_id=$!

        enroll_code=$(${{ inputs.script_path }}/get_enroll_code.sh "$ockam_enroll_log")  
        echo "$enroll_code"

        if which docker; then
          docker run --rm -e ACTIVATION_CODE="$enroll_code" -e SCRIPT_DIR="/work/${{ inputs.script_path }}" -e EMAIL_ADDRESS="${{ inputs.email_address }}" -e HOST_USER_ID=$(id -u) --volume $(pwd):/work ghcr.io/build-trust/artifacts-helper:latest python3 /work/${{ inputs.script_path }}/ockam_enroll.py || (cat geckodriver.log && exit 1)
        else
          ACTIVATION_CODE="$enroll_code" SCRIPT_DIR="${{ inputs.script_path }}" EMAIL_ADDRESS="${{ inputs.email_address }}" python3 ${{ inputs.script_path }}/ockam_enroll.py || (cat geckodriver.log && exit 1)
        fi

        sleep 2
        # Check for exit status
        if ! wait $process_id; then
          echo "Ockam enroll failed"
          cat $ockam_enroll_log
          exit 1
        fi

        echo "Ockam enroll was a success"
        cat $ockam_enroll_log

        echo "calling project list again"
        ockam project list

        echo "calling project ticket"
        ockam project ticket --no-color --usage-count 1 --expires-in 10m --relay redpanda

    - shell: bash
      run: |
        UUID=$(openssl rand -hex 8)
        echo "UNIQUE_ID=$UUID" >> $GITHUB_ENV

    - if: ${{ always() }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.run_id }}-ockam-logs-${{ inputs.controller_addr == '' && 'prod' || 'dev' }}-${{ inputs.perform_ockam_enroll == 'true' && 'new_enroll' || 'cached_enroll' }}-${{ steps.set-output-job-id.outputs.job_id }}-${{ env.UNIQUE_ID }}
        path: ${{ env.OCKAM_ENROLL_LOG }}

    - shell: bash
      run: |
        ockam project show
        ockam project ticket
